"""
Django settings for magent project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import dj_database_url
from typing import Dict, Any
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-p!8r&@_9gaacb1*=qlt3ignh+!lv6^!7r^4@o1+=q3p@hu4(qu")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "customers",
]

# Attempt to include django-storages only if installed to avoid dev errors
try:
    import storages  # type: ignore  # noqa: F401
except ImportError:
    STORAGES_AVAILABLE = False
else:
    STORAGES_AVAILABLE = True
    INSTALLED_APPS.append("storages")

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "magent.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "magent.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES: Dict[str, Dict[str, Any]] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": str(BASE_DIR / "db.sqlite3"),
    }
}

# Configure PostgreSQL for production (Heroku)
database_url = os.environ.get('DATABASE_URL')
if database_url:
    parsed_db = dj_database_url.parse(database_url, conn_max_age=600)
    # Ensure type: cast to Dict[str, Any]
    if isinstance(parsed_db, dict):
        DATABASES['default'] = dict(parsed_db)


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Pacific/Auckland"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise settings for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ------------------------------------------------------------------
# Optional: Amazon S3 / CloudCube / any S3-compatible storage
# Enable by setting either:
#   USE_S3=True (and standard AWS_* env vars including AWS_STORAGE_BUCKET_NAME)
#   or provisioning the Heroku CloudCube add-on which supplies CLOUDCUBE_URL
# CloudCube also sets standard AWS_ACCESS_KEY_ID / AWS_SECRET_ACCESS_KEY.
# ------------------------------------------------------------------
USE_S3 = (os.environ.get('USE_S3', 'False') == 'True' or bool(os.environ.get('CLOUDCUBE_URL'))) and STORAGES_AVAILABLE
if USE_S3:
    # Base AWS credentials (expected from Heroku config vars or CloudCube)
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')  # optional
    AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL')  # optional (for non-AWS providers)

    cloudcube_url = os.environ.get('CLOUDCUBE_URL')
    bucket_name = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    aws_location = ''
    if cloudcube_url and not bucket_name:
        # Parse CloudCube URL: https://<cube-id>.cloud-cube.s3.amazonaws.com/<random-prefix>
        from urllib.parse import urlparse
        parsed = urlparse(cloudcube_url)
        host_parts = parsed.netloc.split('.')
        # <cube-id>.cloud-cube.s3.amazonaws.com -> bucket '<cube-id>.cloud-cube'
        if host_parts:
            bucket_name = f"{host_parts[0]}.cloud-cube"
        # Path holds a random prefix we should retain for namespacing
        aws_location = parsed.path.lstrip('/')
    AWS_STORAGE_BUCKET_NAME = bucket_name
    AWS_LOCATION = aws_location

    if not AWS_STORAGE_BUCKET_NAME:
        # Fail safe: do not enable S3 if bucket missing
        USE_S3 = False
    else:
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        # Cache control & performance tuning
        AWS_S3_OBJECT_PARAMETERS = {
            'CacheControl': 'max-age=86400, s-maxage=86400'
        }
        # Optional reduced ACLs (newer AWS policy style)
        AWS_DEFAULT_ACL = None
        # Build MEDIA_URL
        if AWS_LOCATION:
            MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}/"
        else:
            MEDIA_URL = f"https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
