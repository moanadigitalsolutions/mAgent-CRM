# Generated by Django 4.2.1 on 2025-08-24 12:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("customers", "0004_add_customer_note"),
        ("analytics", "0002_task_workflowtemplate_workflowexecution_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomerScore",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("current_score", models.IntegerField(default=0)),
                (
                    "score_tier",
                    models.CharField(
                        choices=[
                            ("cold", "Cold Lead (0-25)"),
                            ("warm", "Warm Lead (26-50)"),
                            ("hot", "Hot Lead (51-75)"),
                            ("qualified", "Qualified Lead (76-100)"),
                        ],
                        default="cold",
                        max_length=20,
                    ),
                ),
                ("last_calculated", models.DateTimeField(auto_now=True)),
                ("calculation_count", models.IntegerField(default=0)),
                (
                    "score_breakdown",
                    models.JSONField(
                        default=dict, help_text="Breakdown of score by rule"
                    ),
                ),
                ("previous_score", models.IntegerField(default=0)),
                ("score_change", models.IntegerField(default=0)),
                ("last_change_date", models.DateTimeField(blank=True, null=True)),
                (
                    "customer",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lead_score",
                        to="customers.customer",
                    ),
                ),
            ],
            options={
                "ordering": ["-current_score"],
            },
        ),
        migrations.CreateModel(
            name="LeadScoringRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("customer_attribute", "Customer Attribute"),
                            ("interaction_count", "Interaction Count"),
                            ("email_engagement", "Email Engagement"),
                            ("task_completion", "Task Completion"),
                            ("file_uploads", "File Uploads"),
                            ("note_frequency", "Note Frequency"),
                            ("time_since_creation", "Time Since Creation"),
                            ("geographic_location", "Geographic Location"),
                            ("tag_presence", "Tag Presence"),
                            ("custom_field", "Custom Field Value"),
                        ],
                        max_length=50,
                    ),
                ),
                ("condition_config", models.JSONField(default=dict)),
                (
                    "score_value",
                    models.IntegerField(
                        help_text="Points to add/subtract when condition is met"
                    ),
                ),
                (
                    "is_multiplier",
                    models.BooleanField(
                        default=False,
                        help_text="If true, multiply existing score by this value",
                    ),
                ),
                (
                    "max_score_contribution",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum score this rule can contribute",
                        null=True,
                    ),
                ),
                (
                    "evaluation_frequency",
                    models.CharField(
                        choices=[
                            ("realtime", "Real-time (on events)"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                        ],
                        default="realtime",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=0, help_text="Higher priority rules are evaluated first"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="LeadScoringConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("min_score", models.IntegerField(default=0)),
                ("max_score", models.IntegerField(default=100)),
                ("cold_threshold", models.IntegerField(default=25)),
                ("warm_threshold", models.IntegerField(default=50)),
                ("hot_threshold", models.IntegerField(default=75)),
                ("auto_calculation_enabled", models.BooleanField(default=True)),
                (
                    "calculation_frequency",
                    models.CharField(
                        choices=[
                            ("realtime", "Real-time"),
                            ("hourly", "Hourly"),
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                        ],
                        default="realtime",
                        max_length=20,
                    ),
                ),
                ("enable_score_decay", models.BooleanField(default=False)),
                (
                    "decay_rate_percent",
                    models.FloatField(
                        default=5.0, help_text="Percentage to decay scores per period"
                    ),
                ),
                (
                    "decay_frequency_days",
                    models.IntegerField(
                        default=30, help_text="Days between decay applications"
                    ),
                ),
                ("last_decay_applied", models.DateTimeField(blank=True, null=True)),
                ("notify_on_tier_change", models.BooleanField(default=True)),
                ("notify_on_qualified_lead", models.BooleanField(default=True)),
                ("notification_recipients", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lead Scoring Configuration",
                "verbose_name_plural": "Lead Scoring Configuration",
            },
        ),
        migrations.CreateModel(
            name="ScoreHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("old_score", models.IntegerField()),
                ("new_score", models.IntegerField()),
                ("score_change", models.IntegerField()),
                ("old_tier", models.CharField(max_length=20)),
                ("new_tier", models.CharField(max_length=20)),
                ("change_reason", models.CharField(blank=True, max_length=200)),
                ("changed_at", models.DateTimeField(auto_now_add=True)),
                ("context_data", models.JSONField(blank=True, default=dict)),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "customer_score",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="analytics.customerscore",
                    ),
                ),
                (
                    "triggered_by_event",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="analytics.analyticsevent",
                    ),
                ),
                (
                    "triggered_by_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="analytics.leadscoringrule",
                    ),
                ),
            ],
            options={
                "ordering": ["-changed_at"],
                "indexes": [
                    models.Index(
                        fields=["customer_score", "changed_at"],
                        name="analytics_s_custome_773602_idx",
                    ),
                    models.Index(
                        fields=["triggered_by_rule", "changed_at"],
                        name="analytics_s_trigger_7ef732_idx",
                    ),
                    models.Index(
                        fields=["new_tier", "changed_at"],
                        name="analytics_s_new_tie_3225b4_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ScoreCalculationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("calculation_id", models.UUIDField(default=uuid.uuid4, unique=True)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "calculation_type",
                    models.CharField(
                        choices=[
                            ("full_recalc", "Full Recalculation"),
                            ("incremental", "Incremental Update"),
                            ("single_customer", "Single Customer"),
                            ("rule_change", "Rule Change Impact"),
                        ],
                        default="incremental",
                        max_length=20,
                    ),
                ),
                ("customers_processed", models.IntegerField(default=0)),
                ("rules_applied", models.IntegerField(default=0)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="running",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                ("execution_time_seconds", models.FloatField(blank=True, null=True)),
                ("scores_changed", models.IntegerField(default=0)),
                ("tier_changes", models.IntegerField(default=0)),
                ("results_summary", models.JSONField(blank=True, default=dict)),
                (
                    "triggered_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["calculation_type", "started_at"],
                        name="analytics_s_calcula_4362a5_idx",
                    ),
                    models.Index(
                        fields=["status", "started_at"],
                        name="analytics_s_status_59b339_idx",
                    ),
                    models.Index(
                        fields=["triggered_by", "started_at"],
                        name="analytics_s_trigger_39d80f_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="leadscoringrule",
            index=models.Index(
                fields=["rule_type", "is_active"], name="analytics_l_rule_ty_37d1c6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="leadscoringrule",
            index=models.Index(
                fields=["created_by", "created_at"],
                name="analytics_l_created_2e16ac_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="leadscoringrule",
            index=models.Index(
                fields=["evaluation_frequency", "is_active"],
                name="analytics_l_evaluat_f63aa5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customerscore",
            index=models.Index(
                fields=["current_score", "score_tier"],
                name="analytics_c_current_2c8211_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="customerscore",
            index=models.Index(
                fields=["last_calculated"], name="analytics_c_last_ca_83cfc0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customerscore",
            index=models.Index(
                fields=["score_tier", "current_score"],
                name="analytics_c_score_t_246457_idx",
            ),
        ),
    ]
